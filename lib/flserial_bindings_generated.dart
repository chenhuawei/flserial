// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flserial.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlserialBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlserialBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlserialBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int fl_init(
    int portCount,
  ) {
    return _fl_init(
      portCount,
    );
  }

  late final _fl_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fl_init');
  late final _fl_init = _fl_initPtr.asFunction<int Function(int)>();

  int fl_open(
    int flh,
    ffi.Pointer<ffi.Char> portname,
    int baudrate,
  ) {
    return _fl_open(
      flh,
      portname,
      baudrate,
    );
  }

  late final _fl_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('fl_open');
  late final _fl_open =
      _fl_openPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int fl_read(
    int flh,
    int len,
    ffi.Pointer<ffi.Char> buff,
  ) {
    return _fl_read(
      flh,
      len,
      buff,
    );
  }

  late final _fl_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('fl_read');
  late final _fl_read =
      _fl_readPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int fl_write(
    int flh,
    int len,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _fl_write(
      flh,
      len,
      data,
    );
  }

  late final _fl_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('fl_write');
  late final _fl_write =
      _fl_writePtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int fl_close(
    int flh,
  ) {
    return _fl_close(
      flh,
    );
  }

  late final _fl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fl_close');
  late final _fl_close = _fl_closePtr.asFunction<int Function(int)>();

  int fl_ctrl(
    int flh,
    int param,
    int value,
  ) {
    return _fl_ctrl(
      flh,
      param,
      value,
    );
  }

  late final _fl_ctrlPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int32, ffi.Int)>>(
      'fl_ctrl');
  late final _fl_ctrl = _fl_ctrlPtr.asFunction<int Function(int, int, int)>();

  int fl_free() {
    return _fl_free();
  }

  late final _fl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fl_free');
  late final _fl_free = _fl_freePtr.asFunction<int Function()>();
}

abstract class flCtrl {
  static const int FL_CTRL_LAST_ERROR = 0;
  static const int FL_CTRL_IS_PORT_OPEN = 1;
  static const int FL_CTRL_LAST = 2;
}

abstract class flError {
  static const int FL_ERROR_OK = 0;
  static const int FL_ERROR_PORT_ALLREADY_OPEN = 1;
  static const int FL_ERROR_UNKNOW = 2;
  static const int FL_ERROR_LAST = 3;
}
